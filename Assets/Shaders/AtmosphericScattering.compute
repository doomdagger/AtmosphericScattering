//  Copyright(c) 2016, Michal Skalsky
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without modification,
//  are permitted provided that the following conditions are met:
//
//  1. Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//
//  2. Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//
//  3. Neither the name of the copyright holder nor the names of its contributors
//     may be used to endorse or promote products derived from this software without
//     specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
//  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT
//  SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
//  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
//  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
//  TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
//  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#pragma kernel SkyboxLUT
#pragma kernel MultipleScatterLUT
#pragma kernel AerialPerspLUT

RWTexture3D<half4> _SkyboxLUT;
RWTexture3D<half4> _SkyboxLUT2;
RWTexture3D<half4> _SkyboxLUTSingle;

RWTexture3D<half4> _InscatteringLUT;
RWTexture3D<half4> _ExtinctionLUT;

float3 _InscatteringLUTSize;

float4 _BottomLeftCorner;
float4 _TopLeftCorner;
float4 _TopRightCorner;
float4 _BottomRightCorner;

Texture2D<half4> _GatherSumLUT;
Texture2D<half4> _GatherSumLUT2;
Texture2D<half4> _TransmittanceLUT;

SamplerState PointClampSampler;
SamplerState LinearClampSampler;

float _AtmosphereHeight;
float _PlanetRadius;
float4 _DensityScaleHeight;        
float4 _ScatteringR;
float4 _ScatteringM;
float4 _ExtinctionR;
float4 _ExtinctionM;

float4 _LightColor;

float4 _LightDir;
float4 _CameraPos;

float _MieG;

#define PI 3.14159265359

float3 _ScatterLUTSize;
float2 _TransmittanceLUTSize;
float2 _GatherSumLUTSize;

static const float SafetyHeightMargin = 16.f;
static const float HeightPower = 0.5f;
static const float ViewZenithPower = 0.2;
static const float SunViewPower = 1.5f;

//-----------------------------------------------------------------------------------------
// GetCosHorizonAnlge
//-----------------------------------------------------------------------------------------
float GetCosHorizonAnlge(float fHeight)
{
    // Due to numeric precision issues, fHeight might sometimes be slightly negative
    fHeight = max(fHeight, 0);
    return -sqrt(fHeight * (2 * _PlanetRadius + fHeight)) / (_PlanetRadius + fHeight);
}

//-----------------------------------------------------------------------------------------
// TexCoord2ZenithAngle
//-----------------------------------------------------------------------------------------
float TexCoord2ZenithAngle(float fTexCoord, float fHeight, in float fTexDim, float power)
{
    float fCosZenithAngle;

    float fCosHorzAngle = GetCosHorizonAnlge(fHeight);
    if (fTexCoord > 0.5)
    {
        // Remap to [0,1] from the upper half of the texture [0.5 + 0.5/fTexDim, 1 - 0.5/fTexDim]
        fTexCoord = saturate((fTexCoord - (0.5f + 0.5f / fTexDim)) * fTexDim / (fTexDim / 2 - 1));
        fTexCoord = pow(fTexCoord, 1 / power);
        // Assure that the ray does NOT hit Earth
        fCosZenithAngle = max((fCosHorzAngle + fTexCoord * (1 - fCosHorzAngle)), fCosHorzAngle + 1e-4);
    }
    else
    {
        // Remap to [0,1] from the lower half of the texture [0.5, 0.5 - 0.5/fTexDim]
        fTexCoord = saturate((fTexCoord - 0.5f / fTexDim) * fTexDim / (fTexDim / 2 - 1));
        fTexCoord = pow(fTexCoord, 1 / power);
        // Assure that the ray DOES hit Earth
        fCosZenithAngle = min((fCosHorzAngle - fTexCoord * (fCosHorzAngle - (-1))), fCosHorzAngle - 1e-4);
    }
    
    return clamp(fCosZenithAngle, -1, +1);
}

//-----------------------------------------------------------------------------------------
// InsctrLUTCoords2WorldParams
//-----------------------------------------------------------------------------------------
void InsctrLUTCoords2WorldParams(in float3 f3UVW,
                                 out float fHeight,
                                 out float fCosViewZenithAngle,
                                 out float fCosSunZenithAngle)
{
    // Rescale to exactly 0,1 range
    f3UVW.xz = saturate((f3UVW * _ScatterLUTSize - 0.5) / (_ScatterLUTSize - 1)).xz;

    f3UVW.x = pow(f3UVW.x, 1 / HeightPower);
    // Allowable height range is limited to [SafetyHeightMargin, AtmTopHeight - SafetyHeightMargin] to
    // avoid numeric issues at the Earth surface and the top of the atmosphere
    fHeight = f3UVW.x * (_AtmosphereHeight - 2 * SafetyHeightMargin) + SafetyHeightMargin;

    fCosViewZenithAngle = TexCoord2ZenithAngle(f3UVW.y, fHeight, _ScatterLUTSize.y, ViewZenithPower);
    
    // Use Eric Bruneton's formula for cosine of the sun-zenith angle
    fCosSunZenithAngle = tan((2.0 * f3UVW.z - 1.0 + 0.26) * 1.1) / tan(1.26 * 1.1);
    fCosSunZenithAngle = clamp(fCosSunZenithAngle, -1, +1);
}

//-----------------------------------------------------------------------------------------
// ZenithAngle2TexCoord
//-----------------------------------------------------------------------------------------
float ZenithAngle2TexCoord(float fCosZenithAngle, float fHeight, in float fTexDim, float power, float fPrevTexCoord)
{
    fCosZenithAngle = fCosZenithAngle;
    float fTexCoord;
    float fCosHorzAngle = GetCosHorizonAnlge(fHeight);
    // When performing look-ups into the scattering texture, it is very important that all the look-ups are consistent
    // wrt to the horizon. This means that if the first look-up is above (below) horizon, then the second look-up
    // should also be above (below) horizon. 
    // We use previous texture coordinate, if it is provided, to find out if previous look-up was above or below
    // horizon. If texture coordinate is negative, then this is the first look-up
    bool bIsAboveHorizon = fPrevTexCoord >= 0.5;
    bool bIsBelowHorizon = 0 <= fPrevTexCoord && fPrevTexCoord < 0.5;
    if (bIsAboveHorizon ||
        !bIsBelowHorizon && (fCosZenithAngle > fCosHorzAngle))
    {
        // Scale to [0,1]
        fTexCoord = saturate((fCosZenithAngle - fCosHorzAngle) / (1 - fCosHorzAngle));
        fTexCoord = pow(fTexCoord, power);
        // Now remap texture coordinate to the upper half of the texture.
        // To avoid filtering across discontinuity at 0.5, we must map
        // the texture coordinate to [0.5 + 0.5/fTexDim, 1 - 0.5/fTexDim]
        //
        //      0.5   1.5               D/2+0.5        D-0.5  texture coordinate x dimension
        //       |     |                   |            |
        //    |  X  |  X  | .... |  X  ||  X  | .... |  X  |  
        //       0     1          D/2-1   D/2          D-1    texel index
        //
        fTexCoord = 0.5f + 0.5f / fTexDim + fTexCoord * (fTexDim / 2 - 1) / fTexDim;
    }
    else
    {
        fTexCoord = saturate((fCosHorzAngle - fCosZenithAngle) / (fCosHorzAngle - (-1)));
        fTexCoord = pow(fTexCoord, power);
        // Now remap texture coordinate to the lower half of the texture.
        // To avoid filtering across discontinuity at 0.5, we must map
        // the texture coordinate to [0.5, 0.5 - 0.5/fTexDim]
        //
        //      0.5   1.5        D/2-0.5             texture coordinate x dimension
        //       |     |            |       
        //    |  X  |  X  | .... |  X  ||  X  | .... 
        //       0     1          D/2-1   D/2        texel index
        //
        fTexCoord = 0.5f / fTexDim + fTexCoord * (fTexDim / 2 - 1) / fTexDim;
    }

    return fTexCoord;
}

//-----------------------------------------------------------------------------------------
// WorldParams2InsctrLUTCoords
//-----------------------------------------------------------------------------------------
float3 WorldParams2InsctrLUTCoords(float fHeight,
                                   float fCosViewZenithAngle,
                                   float fCosSunZenithAngle,
                                   in float3 f3RefUVW)
{
    float3 f3UVW;

    // Limit allowable height range to [SafetyHeightMargin, AtmTopHeight - SafetyHeightMargin] to
    // avoid numeric issues at the Earth surface and the top of the atmosphere
    // (ray/Earth and ray/top of the atmosphere intersection tests are unstable when fHeight == 0 and
    // fHeight == AtmTopHeight respectively)
    fHeight = clamp(fHeight, SafetyHeightMargin, _AtmosphereHeight - SafetyHeightMargin);
    f3UVW.x = saturate((fHeight - SafetyHeightMargin) / (_AtmosphereHeight - 2 * SafetyHeightMargin));
    f3UVW.x = pow(f3UVW.x, HeightPower);

    f3UVW.y = ZenithAngle2TexCoord(fCosViewZenithAngle, fHeight, _ScatterLUTSize.y, ViewZenithPower, f3RefUVW.y);
    
    // Use Eric Bruneton's formula for cosine of the sun-zenith angle
    f3UVW.z = (atan(max(fCosSunZenithAngle, -0.1975) * tan(1.26 * 1.1)) / 1.1 + (1.0 - 0.26)) * 0.5;
    
    f3UVW.xz = ((f3UVW * (_ScatterLUTSize - 1) + 0.5) / _ScatterLUTSize).xz;

    return f3UVW;
}

//-----------------------------------------------------------------------------------------
// TransmitLUTCoords2WorldParams
//-----------------------------------------------------------------------------------------
void TransmitLUTCoords2WorldParams(in float2 f2UV,
                                    out float fHeight,
                                    out float fCosViewZenithAngle)
{
    // Rescale to exactly 0,1 range
    f2UV.xy = saturate((f2UV * _TransmittanceLUTSize - 0.5) / (_TransmittanceLUTSize - 1)).xy;

    f2UV.x = pow(f2UV.x, 1 / HeightPower);
    // Allowable height range is limited to [SafetyHeightMargin, AtmTopHeight - SafetyHeightMargin] to
    // avoid numeric issues at the Earth surface and the top of the atmosphere
    fHeight = f2UV.x * (_AtmosphereHeight - 2 * SafetyHeightMargin) + SafetyHeightMargin;
    
    // Use Eric Bruneton's formula for cosine of the sun-zenith angle
    fCosViewZenithAngle = tan((2.0 * f2UV.y - 1.0 + 0.26) * 1.1) / tan(1.26 * 1.1);
    fCosViewZenithAngle = clamp(fCosViewZenithAngle, -1, +1);
}

//-----------------------------------------------------------------------------------------
// WorldParams2TransmitLUTCoords
//-----------------------------------------------------------------------------------------
float2 WorldParams2TransmitLUTCoords(float fHeight,
                                     float fCosViewZenithAngle)
{
    float2 f2UV;

    // Limit allowable height range to [SafetyHeightMargin, AtmTopHeight - SafetyHeightMargin] to
    // avoid numeric issues at the Earth surface and the top of the atmosphere
    // (ray/Earth and ray/top of the atmosphere intersection tests are unstable when fHeight == 0 and
    // fHeight == AtmTopHeight respectively)
    fHeight = clamp(fHeight, SafetyHeightMargin, _AtmosphereHeight - SafetyHeightMargin);
    f2UV.x = saturate((fHeight - SafetyHeightMargin) / (_AtmosphereHeight - 2 * SafetyHeightMargin));
    f2UV.x = pow(f2UV.x, HeightPower);
    
    // Use Eric Bruneton's formula for cosine of the sun-zenith angle
    f2UV.y = (atan(max(fCosViewZenithAngle, -0.1975) * tan(1.26 * 1.1)) / 1.1 + (1.0 - 0.26)) * 0.5;
    
    f2UV.xy = ((f2UV * (_TransmittanceLUTSize - 1) + 0.5) / _TransmittanceLUTSize).xy;

    return f2UV;
}

//-----------------------------------------------------------------------------------------
// GatherSumLUTCoords2WorldParams
//-----------------------------------------------------------------------------------------
void GatherSumLUTCoords2WorldParams(in float2 f2UV,
                                    out float fHeight,
                                    out float fCosSunZenithAngle)
{
    // Rescale to exactly 0,1 range
    f2UV.xy = saturate((f2UV * _GatherSumLUTSize - 0.5) / (_GatherSumLUTSize - 1)).xy;

    f2UV.x = pow(f2UV.x, 1 / HeightPower);
    // Allowable height range is limited to [SafetyHeightMargin, AtmTopHeight - SafetyHeightMargin] to
    // avoid numeric issues at the Earth surface and the top of the atmosphere
    fHeight = f2UV.x * (_AtmosphereHeight - 2 * SafetyHeightMargin) + SafetyHeightMargin;
    
    // Use Eric Bruneton's formula for cosine of the sun-zenith angle
    fCosSunZenithAngle = tan((2.0 * f2UV.y - 1.0 + 0.26) * 1.1) / tan(1.26 * 1.1);
    fCosSunZenithAngle = clamp(fCosSunZenithAngle, -1, +1);
}

//-----------------------------------------------------------------------------------------
// WorldParams2TransmitLUTCoords
//-----------------------------------------------------------------------------------------
float2 WorldParams2GatherSumLUTCoords(float fHeight,
                                     float fCosSunZenithAngle)
{
    float2 f2UV;

    // Limit allowable height range to [SafetyHeightMargin, AtmTopHeight - SafetyHeightMargin] to
    // avoid numeric issues at the Earth surface and the top of the atmosphere
    // (ray/Earth and ray/top of the atmosphere intersection tests are unstable when fHeight == 0 and
    // fHeight == AtmTopHeight respectively)
    fHeight = clamp(fHeight, SafetyHeightMargin, _AtmosphereHeight - SafetyHeightMargin);
    f2UV.x = saturate((fHeight - SafetyHeightMargin) / (_AtmosphereHeight - 2 * SafetyHeightMargin));
    f2UV.x = pow(f2UV.x, HeightPower);
    
    // Use Eric Bruneton's formula for cosine of the sun-zenith angle
    f2UV.y = (atan(max(fCosSunZenithAngle, -0.1975) * tan(1.26 * 1.1)) / 1.1 + (1.0 - 0.26)) * 0.5;
    
    f2UV.xy = ((f2UV * (_GatherSumLUTSize - 1) + 0.5) / _GatherSumLUTSize).xy;

    return f2UV;
}

//-----------------------------------------------------------------------------------------
// ScatteringOutput
//-----------------------------------------------------------------------------------------
struct ScatteringOutput
{
	float3 rayleigh;
	float3 mie;
};

//-----------------------------------------------------------------------------------------
// RaySphereIntersection
//-----------------------------------------------------------------------------------------
float2 RaySphereIntersection(float3 rayOrigin, float3 rayDir, float3 sphereCenter, float sphereRadius)
{
    rayOrigin -= sphereCenter;
    float a = dot(rayDir, rayDir);
    float b = 2.0 * dot(rayOrigin, rayDir);
    float c = dot(rayOrigin, rayOrigin) - (sphereRadius * sphereRadius);
    float d = b * b - 4 * a * c;
    if (d < 0)
    {
        return -1;
    }
    else
    {
        d = sqrt(d);
        return float2(-b - d, -b + d) / (2 * a);
    }
}

//-----------------------------------------------------------------------------------------
// GetTransmittanceP2PA
//-----------------------------------------------------------------------------------------
void GetTransmittanceP2PA(out float3 transmittance, float2 uv)
{
    transmittance = _TransmittanceLUT.SampleLevel(LinearClampSampler, uv, 0.0).rgb;
}

//-----------------------------------------------------------------------------------------
// ApplyPhaseFunctionElek
//-----------------------------------------------------------------------------------------
void ApplyPhaseFunctionElek(inout float3 scatterR, inout float3 scatterM, float cosAngle)
{
    float inv4PI = 1.0 / (4.0 * PI);
	// r
    float phase = inv4PI * (8.0 / 10.0) * ((7.0 / 5.0) + 0.5 * cosAngle);
    scatterR *= phase;

	// m
    float g = _MieG;
    float g2 = g * g;
    phase = inv4PI * ((3.0 * (1.0 - g2)) / (2.0 * (2.0 + g2))) * ((1 + cosAngle * cosAngle) / (pow((1 + g2 - 2 * g * cosAngle), 3.0 / 2.0)));
    scatterM *= phase;
}

//-----------------------------------------------------------------------------------------
// PrepareAllParametersForScattering
//-----------------------------------------------------------------------------------------
void PrepareAllParametersForScattering(float3 coords, out float3 rayStart, out float3 rayDir, out float rayLength, out float3 planetCenter, out float3 lightDir, out float height)
{
    float viewZenithAngle, sunZenithAngle;
    InsctrLUTCoords2WorldParams(coords, height, viewZenithAngle, sunZenithAngle);

    planetCenter = float3(0, -_PlanetRadius, 0);
    rayStart = float3(0, height, 0);

    rayDir = float3(sqrt(saturate(1 - viewZenithAngle * viewZenithAngle)), viewZenithAngle, 0);
    lightDir = float3(sqrt(saturate(1 - sunZenithAngle * sunZenithAngle)), sunZenithAngle, 0);

    float2 intersection = RaySphereIntersection(rayStart, rayDir, planetCenter, _PlanetRadius + _AtmosphereHeight);
    rayLength = intersection.y;

    intersection = RaySphereIntersection(rayStart, rayDir, planetCenter, _PlanetRadius);
    if (intersection.x > 0)
        rayLength = min(rayLength, intersection.x);
}

//-----------------------------------------------------------------------------------------
// IntegrateInscattering
//-----------------------------------------------------------------------------------------
ScatteringOutput IntegrateInscattering(float3 rayStart, float3 rayDir, float rayLength, float3 planetCenter, float3 lightDir, float height)
{
	float sampleCount = 64;
    float stepSize = length(rayDir * rayLength) / sampleCount;

    float2 previousDensity, currentDensity, totalDensity;
    float3 previousScatterR, currentScatterR, totalScatterR;
    float3 previousScatterM, currentScatterM, totalScatterM;
    
    float2 transUV = WorldParams2TransmitLUTCoords(height, lightDir.y);

    float3 transmittance;
    previousDensity = exp(-(height.xx / _DensityScaleHeight.xy));
    GetTransmittanceP2PA(transmittance, transUV);

    // pa to pa, transmittance is exp(-(0)) = 1, so we only multiply transmittance from pa to pb
    previousScatterR = previousDensity.x * transmittance;
    previousScatterM = previousDensity.y * transmittance;

	[loop]
	for (int step = 1; step <= sampleCount; step += 1)
	{
		float3 p = rayStart + step * stepSize * rayDir;

        height = length(p - planetCenter) - _PlanetRadius;
        transUV = WorldParams2TransmitLUTCoords(height, lightDir.y);

        currentDensity = exp(-(height.xx / _DensityScaleHeight.xy));
        totalDensity += (currentDensity + previousDensity) / 2.0 * stepSize;

        GetTransmittanceP2PA(transmittance, transUV);
        transmittance *= exp(-(totalDensity.x * _ExtinctionR.xyz + totalDensity.y * _ExtinctionM.xyz));

        currentScatterR = transmittance * currentDensity.x;
        currentScatterM = transmittance * currentDensity.y;

        totalScatterR += (previousScatterR + currentScatterR) / 2.0 * stepSize;
        totalScatterM += (previousScatterM + currentScatterM) / 2.0 * stepSize;

        previousDensity = currentDensity;
        previousScatterR = currentScatterR;
        previousScatterM = currentScatterM;
	}

	ScatteringOutput output;

    totalScatterR *= _ScatteringR.xyz;
    totalScatterM *= _ScatteringM.xyz;

    // Attention: should apply Phase Function after Mie approximation!

	output.rayleigh = max(totalScatterR, 0);
	output.mie = max(totalScatterM, 0);

	return output;
}

//-----------------------------------------------------------------------------------------
// SkyboxLUT
//-----------------------------------------------------------------------------------------
[numthreads(1,1,1)]
void SkyboxLUT(uint3 id : SV_DispatchThreadID)
{
	float w, h, d;
	_SkyboxLUT.GetDimensions(w, h, d);

	// linear parameters
	float3 coords = float3(id.x / (w - 1), id.y / (h - 1), id.z / (d - 1));

    float3 rayStart, rayDir, planetCenter, lightDir;
    float rayLength, height;

    PrepareAllParametersForScattering(coords, rayStart, rayDir, rayLength, planetCenter, lightDir, height);

	ScatteringOutput scattering = IntegrateInscattering(rayStart, rayDir, rayLength, planetCenter, lightDir, height);
	
	_SkyboxLUT[id.xyz] = float4(scattering.rayleigh.xyz, scattering.mie.x);
	_SkyboxLUTSingle[id.xyz] = float4(scattering.rayleigh.xyz, scattering.mie.x);
}


//-----------------------------------------------------------------------------------------
// GetDirectionFromCos
//-----------------------------------------------------------------------------------------
float3 GetDirectionFromCos(float cos_value)
{
    return float3(sqrt(saturate(1 - cos_value * cos_value)), cos_value, 0);
}

//-----------------------------------------------------------------------------------------
// ApproximateMieFromRayleigh
//-----------------------------------------------------------------------------------------
void ApproximateMieFromRayleigh(in float4 scatterR, out float3 scatterM)
{
    if (scatterR.x == 0)
        scatterM = float3(0, 0, 0);
    else
        scatterM = scatterR.xyz * ((scatterR.w) / (scatterR.x)) * (_ScatteringR.x / _ScatteringM.x) * (_ScatteringM.xyz / _ScatteringR.xyz);
}

//-----------------------------------------------------------------------------------------
// GatherSum2
//-----------------------------------------------------------------------------------------
void GatherSum2(out float3 gatheredLight, float2 coords)
{
	gatheredLight = _GatherSumLUT2.SampleLevel(LinearClampSampler, coords, 0.0).rgb;
}

//-----------------------------------------------------------------------------------------
// IntegrateMultiScattering
//-----------------------------------------------------------------------------------------
ScatteringOutput IntegrateMultiScattering(float3 rayStart, float3 rayDir, float rayLength, float3 planetCenter, float3 lightDir, float height, float3 coords)
{
    float sampleCount = 64;
    float stepSize = length(rayDir * rayLength) / sampleCount;

    float2 previousDensity, currentDensity, totalDensity;
    float3 previousScatterR, currentScatterR, totalScatterR;
    float3 previousScatterM, currentScatterM, totalScatterM;
    float3 gatheredLight;

    float3 transmittance;
    previousDensity = exp(-(height.xx / _DensityScaleHeight.xy));
	
	float2 gatherUV = coords.xz;
    GatherSum2(gatheredLight, gatherUV);

    previousScatterR = previousDensity.x * gatheredLight;
    previousScatterM = previousDensity.y * gatheredLight;

	[loop]
    for (int step = 1; step <= sampleCount; step += 1)
    {
        float3 p = rayStart + step * stepSize * rayDir;

        height = length(p - planetCenter) - _PlanetRadius;

        currentDensity = exp(-(height.xx / _DensityScaleHeight.xy));
        totalDensity += (currentDensity + previousDensity) / 2.0 * stepSize;

        transmittance = exp(-(totalDensity.x * _ExtinctionR.xyz + totalDensity.y * _ExtinctionM.xyz));

        gatherUV = WorldParams2GatherSumLUTCoords(height, lightDir.y);
        GatherSum2(gatheredLight, gatherUV);

        currentScatterR = transmittance * currentDensity.x * gatheredLight;
        currentScatterM = transmittance * currentDensity.y * gatheredLight;

        totalScatterR += (previousScatterR + currentScatterR) / 2.0 * stepSize;
        totalScatterM += (previousScatterM + currentScatterM) / 2.0 * stepSize;

        previousDensity = currentDensity;
        previousScatterR = currentScatterR;
        previousScatterM = currentScatterM;
    }

    ScatteringOutput output;

    totalScatterR *= _ScatteringR.xyz;
    totalScatterM *= _ScatteringM.xyz;

    // Attention: should apply Phase Function after Mie approximation!

    output.rayleigh = max(totalScatterR, 0.0);
    output.mie = max(totalScatterM, 0.0);

    return output;
}

//-----------------------------------------------------------------------------------------
// MultipleOrdering Scattering
//-----------------------------------------------------------------------------------------
[numthreads(1, 1, 1)]
void MultipleScatterLUT(uint3 id : SV_DispatchThreadID)
{
    float w, h, d;
    _SkyboxLUT2.GetDimensions(w, h, d);

	// linear parameters
    float3 coords = float3(id.x / (w - 1), id.y / (h - 1), id.z / (d - 1));

    float3 rayStart, rayDir, planetCenter, lightDir;
    float rayLength, height;

    PrepareAllParametersForScattering(coords, rayStart, rayDir, rayLength, planetCenter, lightDir, height);

    ScatteringOutput scattering = IntegrateMultiScattering(rayStart, rayDir, rayLength, planetCenter, lightDir, height, coords);
	
    _SkyboxLUT2[id.xyz] = float4(scattering.rayleigh.xyz, scattering.mie.x);
    _SkyboxLUT[id.xyz] += float4(scattering.rayleigh.xyz, scattering.mie.x);
}

//-----------------------------------------------------------------------------------------
// GatherSum
//-----------------------------------------------------------------------------------------
void GatherSum(out float3 gatheredLight, float2 coords)
{
	gatheredLight = _GatherSumLUT.SampleLevel(LinearClampSampler, coords, 0.0).rgb;
}

//-----------------------------------------------------------------------------------------
// ComputeAerialPerspInscatterAndTransmittance
//-----------------------------------------------------------------------------------------
void ComputeAerialPerspInscatterAndTransmittance(float3 rayStart, float3 rayDir, float rayLength, float3 planetCenter, float3 lightDir, uint3 coords, uint sampleCount)
{
	float stepSize = length(rayDir * rayLength) / (sampleCount - 1);

	float height = length(rayStart - planetCenter) - _PlanetRadius;
	float cos_s = dot(normalize(rayStart - planetCenter), lightDir);

    float3 transZenith = _TransmittanceLUT.SampleLevel(LinearClampSampler, WorldParams2TransmitLUTCoords(0.0, 1.0), 0.0).xyz;
    float3 sunRadiance = _LightColor.rgb / transZenith;

    float2 gatherUV = WorldParams2GatherSumLUTCoords(height, cos_s);

	float3 transmittance;
	float2 previousDensity, currentDensity, totalDensity;
	float3 previousScatterR, currentScatterR, totalScatterR;
	float3 previousScatterM, currentScatterM, totalScatterM;
	float3 gatheredLight;

	previousDensity = exp(-(height.xx / _DensityScaleHeight.xy));

    GatherSum(gatheredLight, gatherUV);
    previousScatterR = previousDensity.x * gatheredLight;
    previousScatterM = previousDensity.y * gatheredLight;

	_InscatteringLUT[coords] = float4(0, 0, 0, 1);
	_ExtinctionLUT[coords] = float4(1, 1, 1, 1);

	[loop]
	for (coords.z = 1; coords.z < sampleCount; coords.z += 1)
	{
		float3 p = rayStart + coords.z * stepSize * rayDir;

		height = length(p - planetCenter) - _PlanetRadius;
		cos_s = dot(normalize(p - planetCenter), lightDir);

        gatherUV = WorldParams2GatherSumLUTCoords(height, cos_s);
		GatherSum(gatheredLight, gatherUV);

		currentDensity = exp(-(height.xx / _DensityScaleHeight.xy));
		totalDensity += (currentDensity + previousDensity) / 2.0 * stepSize;

		transmittance = exp(-(totalDensity.x * _ExtinctionR.xyz + totalDensity.y * _ExtinctionM.xyz));

        currentScatterR = gatheredLight * transmittance * currentDensity.x;
        currentScatterM = gatheredLight * transmittance * currentDensity.y;

		totalScatterR += (previousScatterR + currentScatterR) / 2.0 * stepSize;
		totalScatterM += (previousScatterM + currentScatterM) / 2.0 * stepSize;

		previousDensity = currentDensity;
		previousScatterR = currentScatterR;
		previousScatterM = currentScatterM;

		float3 inscatterR = totalScatterR;
		float3 inscatterM = totalScatterM;

		inscatterR *= _ScatteringR.xyz;
		inscatterM *= _ScatteringM.xyz;
		ApplyPhaseFunctionElek(inscatterR, inscatterM, dot(rayDir, lightDir.xyz));

        _InscatteringLUT[coords] = float4((inscatterR + inscatterM) * sunRadiance, 1.0);
		_ExtinctionLUT[coords] = float4(transmittance, 1.0);
	}
}

//-----------------------------------------------------------------------------------------
// AerialPerspLUT
//-----------------------------------------------------------------------------------------
[numthreads(1, 1, 1)]
void AerialPerspLUT(uint3 id : SV_DispatchThreadID)
{
	float w, h, d;
	_InscatteringLUT.GetDimensions(w, h, d);

	float2 coords = float2(id.x / (w - 1), id.y / (h - 1));

	float3 v1 = lerp(_BottomLeftCorner.xyz, _BottomRightCorner.xyz, coords.x);
	float3 v2 = lerp(_TopLeftCorner.xyz, _TopRightCorner.xyz, coords.x);

	float3 rayEnd = lerp(v1, v2, coords.y);
	float3 rayStart = _CameraPos.xyz;

	float3 rayDir = rayEnd - rayStart;
	float rayLength = length(rayDir);
	rayDir /= rayLength;

	float3 planetCenter = float3(0, -_PlanetRadius, 0);

	ComputeAerialPerspInscatterAndTransmittance(rayStart, rayDir, rayLength, planetCenter, normalize(-_LightDir.xyz), id, d);
}